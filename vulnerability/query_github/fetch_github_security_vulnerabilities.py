import json
import os
import time
from pydoc import describe
from python_graphql_client import GraphqlClient


client = GraphqlClient(endpoint="https://api.github.com/graphql")


def make_query(after_cursor=None):
    return """
query {
	securityVulnerabilities(first: 100, after: AFTER, ecosystem:PIP) {
    pageInfo {
      hasNextPage
      endCursor
    }
    nodes {
      package {
        name
      }
      vulnerableVersionRange
      firstPatchedVersion {
        identifier
      }
      advisory {
        identifiers {
          type
          value
        }
        permalink
        summary
        withdrawnAt
      } 
      severity
    }
  }
}
""".replace(
        "AFTER", '"{}"'.format(after_cursor) if after_cursor else "null"
    )


def fetch_security_vulnerabilities(oauth_token):
    data_for_frontend = []
    data_for_dependabot = []

    has_next_page = True
    after_cursor = None
    id = 0

    while has_next_page:
        data = client.execute(
            query=make_query(after_cursor),
            headers={"Authorization": "Bearer {}".format(oauth_token)},
        )
        for vulnerability in data["data"]["securityVulnerabilities"]["nodes"]:
            vulnerable_version_range = vulnerability["vulnerableVersionRange"]
            package_name = vulnerability["package"]["name"]
            first_patch = vulnerability["firstPatchedVersion"]
            if first_patch:
                first_patch_version = first_patch["identifier"]
            else:
                first_patch_version = None
            cve_id = None
            ghsa_id = None
            for k in vulnerability["advisory"]["identifiers"]:
                if k["type"] == "CVE":
                    cve_id = k["value"]
                elif k["type"] == "GHSA":
                    ghsa_id = k["value"]
            permalink = vulnerability["advisory"]["permalink"]
            summary = vulnerability["advisory"]["summary"]
            severity = vulnerability["severity"]
            withdrawn_at = vulnerability["advisory"]["withdrawnAt"]
            if withdrawn_at is None:
                data_for_frontend.append(
                    dict(
                        id=id,
                        permalink=permalink,
                        severity=severity,
                        summary=summary,
                        vulnerable_version_range=vulnerable_version_range,
                        patch_available=first_patch_version is not None,
                        cve_id=cve_id if cve_id else ghsa_id,
                    )
                )
                if first_patch_version is not None:
                    data_for_frontend[-1].update(
                         {
                            "dependency-name": package_name,
                            "patched-versions": [first_patch_version],
                            "unaffected-versions": [],
                            "affected-versions": [vulnerable_version_range],
                        }
                    )
                    data_for_dependabot.append(
                        {
                            "dependency-name": package_name,
                            "patched-versions": [first_patch_version],
                            "unaffected-versions": [],
                            "affected-versions": [vulnerable_version_range],
                        }
                    )
                id += 1
        has_next_page = data["data"]["securityVulnerabilities"]["pageInfo"][
            "hasNextPage"
        ]
        after_cursor = data["data"]["securityVulnerabilities"]["pageInfo"]["endCursor"]
    save_data("frontend_data.json", data_for_frontend)
    save_data("dependabot_data.json", data_for_dependabot)


def save_data(filename, dict):
    with open(filename, "w") as f:
        json.dump(dict, f, indent=4)


if __name__ == "__main__":
    while True:
        fetch_security_vulnerabilities(oauth_token=os.environ.get("GITHUB_TOKEN"))
        time.sleep(24 * 60 * 60)